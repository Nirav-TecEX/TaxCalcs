def tax_recalc(results_df,lookup_value):
    	all_taxes_total = {}
    #Get a dictionary of all the taxes that apply to the clearance country of the SO.
    structure_df = results_df["Tax_Structure_Per_Country__c"]
    all_taxes_dict = structure_df[structure_df["Country__r.Name"] == results_df["Shipment_Order__c"].at[lookup_value, "CPA_v2_0__r.Final_Destination__c"]].T.to_dict()

    tax_calc_totals_dict = {}
    
    li_df = results_df["Part__c"]
    li_dict = li_df[li_df["Shipment_Order__r.Client_Reference__c"] == lookup_value].T.to_dict()
    
    #determine whether the SO has line items or not
    has_line_items = results_df["Shipment_Order__c"].at[lookup_value, "of_Line_Items__c"]>0
    
    #this assigns the necessary variables from the specific record.
    shipment_value = results_df["Shipment_Order__c"].at[lookup_value, "Shipment_Value_USD__c"]
    ship_from = results_df["Shipment_Order__c"].at[lookup_value, "Ship_From_Country__c"]
    cif_freight_insurance = results_df["Shipment_Order__c"].at[lookup_value, "CPA_v2_0__r.CIF_Freight_and_Insurance__c"]
    freight_amount = results_df["Shipment_Order__c"].at[lookup_value, "Client_Actual_Freight_Value__c"]
    insurance_amount = results_df["Shipment_Order__c"].at[lookup_value, "Client_Actual_Insurance_Value__c"]
    
    #Do this for each tax within the tax dictionary.
    for tax in all_taxes_dict.keys():
        #this assigns the necessary variables from the specific tax.
        condition_logic = all_taxes_dict[tax]["Condition_Logic__c"]
        part_specific = all_taxes_dict[tax]["Part_Specific__c"]
        default_duty_rate = all_taxes_dict[tax]["Default_Duty_Rate__c"]
        additional_part_specific = all_taxes_dict[tax]["Additional_Part_Specific_Tax__c"]
        rate = all_taxes_dict[tax]["Rate__c"]
        amount = all_taxes_dict[tax]["Amount__c"]
        tax_max = all_taxes_dict[tax]["Max__c"]
        tax_min = all_taxes_dict[tax]["Min__c"]
        additional_percent = all_taxes_dict[tax]["Additional_Percent__c"]
        applied_to = all_taxes_dict[tax]["Applied_to_Value__c"]
        applies_to = all_taxes_dict[tax]["Applies_to_Order__c"]
        cif_absolute_value = all_taxes_dict[tax]["Country__r.CIF_Absolute_value_adjustment__c"]
        cif_factor = all_taxes_dict[tax]["Country__r.CIF_Adjustment_Factor__c"]

        if not has_line_items or (has_line_items and not part_specific):
        
            #This determines the FOB value of the record.
            if not pd.isna(additional_percent):
                so_fob_value = shipment_value * (1 + additional_percent/100)
            else:
                so_fob_value = shipment_value

            #This determines the CIF value of the record.
            if pd.isna(cif_freight_insurance):
                so_cif_value = (shipment_value + cif_absolute_value) * (1 + cif_factor/100)
            else:
                so_cif_value = shipment_value + freight_amount + insurance_amount

            so_cif_value2 = so_cif_value

            if not pd.isna(additional_percent):
                so_cif_value = so_cif_value * (1 + additional_percent/100)

            #This get the correct applied to value before addition additional applies to values.
            if pd.isna(amount):
                if applied_to == "FOB":
                    applied_to = so_fob_value
                elif applied_to == "CIF":
                    applied_to = so_cif_value
                else:
                    applied_to = tax_calc_totals_dict[applied_to]

            #This is to add any applies to values to the applied to value.
            if not pd.isna(applies_to) and applies_to != "0":
                applies_to = applies_to.split(",")

                additional_applied_to_list = []

                for value in applies_to:
                    additional_applied_to_list.append(tax_calc_totals_dict[value])
                applied_to += sum(additional_applied_to_list)

            #Get a dictionary of all the conditions that apply to the tax.
            condition_result_dict = {}
            conditions_met = True
            if not pd.isna(condition_logic):

                conditions_df = results_df["Tax_Condition__c"]
                conditions_dict = conditions_df[conditions_df["Tax_Structure_Per_Country__c"] == all_taxes_dict[tax]['Id']].T.to_dict()
                #Do this for each tax conditions within the condition dictionary.
                for condition in conditions_dict.keys():
                    #Define all the variables from the tax condition that will be used in the evaluation.
                    operator = conditions_dict[condition]["Condition__c"]
                    ceiling = conditions_dict[condition]["Condition_Ceiling__c"]
                    currency = conditions_dict[condition]["Condition_Currency__c"]
                    floor = conditions_dict[condition]["Condition_Floor__c"]
                    condition_number = conditions_dict[condition]["Condition_Number__c"]
                    condition_region = conditions_dict[condition]["Condition_Region__c"]
                    condition_value = conditions_dict[condition]["Condition_Value__c"]

#*#*#               operators: Between,>,>=,<,<=,Contains,Does Not Contain
#*#*#               regions: European Union / specified country
#*#*#               condition values: Ship From Country, Shipment Value, CIF Value

                    #Determines whether the ship from region is part of the EU.
                    if ship_from in results_df["CountryandRegionMap__c"]["Country__c"].to_list():
                        record_region = "European Union"
                    else:
                        record_region = "Not EU"

                    #Defines the value that needs to be evaluated.
                    if condition_value == "CIF Value":
                        compare_from = so_cif_value2
                    elif condition_value == "Shipment Value":
                        compare_from = shipment_value
                    elif condition_value == "Ship From Country" and condition_region == "European Union":
                        compare_from = record_region
                    elif condition_value == "COO":
                        compare_from = "No Line Items added"
                    else:
                        compare_from = ship_from

                    #Code to determine if the condition is met or not.
                    if operator == ">=":
                        condition_result = compare_from >= floor
                    elif operator == ">":
                        condition_result = compare_from > floor
                    elif operator == "<=":
                        condition_result = compare_from <= floor
                    elif operator == "<":
                        condition_result = compare_from < floor
                    elif operator == "Between":
                        condition_result = (compare_from <= ceiling) and (compare_from > floor)
                    elif operator == "Contains":
                        condition_result = compare_from in condition_region
                    elif operator == "Does Not Contain":
                        condition_result = compare_from not in condition_region

                    condition_result_dict[condition_number] = str(condition_result)

                eval_string = condition_logic.lower()
                for i in list(range(eval_string.count("and") + eval_string.count("or") + 1)):
                    eval_string = eval_string.replace(str(i + 1),condition_result_dict[str(i + 1)])

                conditions_met = eval(eval_string)

            #Calculates the total for the specific tax.
            if conditions_met == False:
                specific_total = 0
            else:
                if not pd.isna(amount):
                    specific_total = amount
                elif part_specific:
                    if pd.isna(additional_part_specific):
                        specific_total = applied_to * default_duty_rate/100
                    else:
                        specific_total = 0
                else:
                    specific_total = applied_to * rate/100

                if not pd.isna(tax_min):
                    if not pd.isna(tax_max):
                        specific_total = min([max([tax_min,specific_total]),tax_max])
                    else:
                        specific_total = max([tax_min,specific_total])
                elif not pd.isna(tax_max):
                    specific_total = min([specific_total,tax_max])
            
            #Creates a dictionary of all the total for the specific taxes
            tax_calc_totals_dict[all_taxes_dict[tax]["Order_Number__c"]] = specific_total
#*#            print(tax_calc_totals_dict)
#*#            print(specific_total)
        else:
            #This determines the CIF value of the record.
            if pd.isna(cif_freight_insurance):
                so_cif_value = (shipment_value + cif_absolute_value) * (1 + cif_factor/100)
            else:
                so_cif_value = shipment_value + freight_amount + insurance_amount

            so_cif_value2 = so_cif_value
            
            li_tax_calc_totals_dict = {}
            
            for li in li_dict.keys():
                
                condition_logic = all_taxes_dict[tax]["Condition_Logic__c"]
                applied_to = all_taxes_dict[tax]["Applied_to_Value__c"]
                coo = results_df["Part__c"].at[li, "Country_of_Origin2__c"]
                li_value = results_df["Part__c"].at[li, "Total_Value__c"]
                li_rate = results_df["Part__c"].at[li, "Rate__c"]
                li_part_specific_1 = results_df["Part__c"].at[li, "Part_Specific_Rate_1__c"]
                li_part_specific_2 = results_df["Part__c"].at[li, "Part_Specific_Rate_2__c"]
                li_part_specific_3 = results_df["Part__c"].at[li, "Part_Specific_Rate_3__c"]

                #This determines the FOB value of the record.
                if not pd.isna(additional_percent):
                    so_fob_value = shipment_value * (1 + additional_percent/100)
                    li_fob_value = li_value * (1 + additional_percent/100)
                else:
                    so_fob_value = shipment_value
                    li_fob_value = li_value


                #This determines the CIF value of the record.
                so_cif_value = so_cif_value2
                li_cif_value = so_cif_value * (li_value/shipment_value)
                li_cif_value2 = so_cif_value2 * (li_value/shipment_value)

                if not pd.isna(additional_percent):
                    so_cif_value = so_cif_value * (1 + additional_percent/100)
                    li_cif_value = li_cif_value * (1 + additional_percent/100)

                #This get the correct applied to value before addition additional applies to values.
                if pd.isna(amount):
                    if applied_to == "FOB":
                        applied_to = li_fob_value
                    elif applied_to == "CIF":
                        applied_to = li_cif_value
                    else:
                        applied_to = tax_calc_totals_dict[applied_to]

                #This is to add any applies to values to the applied to value.
                if not pd.isna(applies_to) and applies_to != "0":
                    applies_to = applies_to.split(",")

                    additional_applied_to_list = []

                    for value in applies_to:
                        additional_applied_to_list.append(tax_calc_totals_dict[value])

                    applied_to += sum(additional_applied_to_list)

                #Get a dictionary of all the conditions that apply to the tax.
                condition_result_dict = {}
                conditions_met = True
                if not pd.isna(condition_logic):

                    conditions_df = results_df["Tax_Condition__c"]
                    conditions_dict = conditions_df[conditions_df["Tax_Structure_Per_Country__c"] == all_taxes_dict[tax]['Id']].T.to_dict()

                    #Do this for each tax conditions within the condition dictionary.
                    for condition in conditions_dict.keys():

                        #Define all the variables from the tax condition that will be used in the evaluation.
                        operator = conditions_dict[condition]["Condition__c"]
                        ceiling = conditions_dict[condition]["Condition_Ceiling__c"]
                        currency = conditions_dict[condition]["Condition_Currency__c"]
                        floor = conditions_dict[condition]["Condition_Floor__c"]
                        condition_number = conditions_dict[condition]["Condition_Number__c"]
                        condition_region = conditions_dict[condition]["Condition_Region__c"]
                        condition_value = conditions_dict[condition]["Condition_Value__c"]

#*#*#                   operators: Between,>,>=,<,<=,Contains,Does Not Contain
#*#*#                   regions: European Union / specified country
#*#*#                   condition values: Ship From Country, Shipment Value, CIF Value

                        #Determines whether the ship from region is part of the EU.
                        if ship_from in results_df["CountryandRegionMap__c"]["Country__c"].to_list():
                            ship_from_region = "European Union"
                        else:
                            ship_from_region = "Not EU"

                        #Determines whether the coo region is part of the EU.
                        if coo in results_df["CountryandRegionMap__c"]["Country__c"].to_list():
                            coo_region = "European Union"
                        else:
                            coo_region = "Not EU"

                        #Defines the value that needs to be evaluated.
                        if condition_value == "CIF Value":
                            compare_from = so_cif_value2
                        elif condition_value == "Shipment Value":
                            compare_from = shipment_value
                        elif condition_value == "Ship From Country" and condition_region == "European Union":
                            compare_from = ship_from_region
                        elif condition_value == "Ship From Country" and condition_region != "European Union":
                            compare_from = ship_from
                        elif condition_value == "COO" and condition_region == "European Union":
                            compare_from = coo_region
                        elif condition_value == "COO" and condition_region != "European Union":
                            compare_from = coo

                        #Code to determine if the condition is met or not.
                        if operator == ">=":
                            condition_result = compare_from >= floor
                        elif operator == ">":
                            condition_result = compare_from > floor
                        elif operator == "<=":
                            condition_result = compare_from <= floor
                        elif operator == "<":
                            condition_result = compare_from < floor
                        elif operator == "Between":
                            condition_result = (compare_from <= ceiling) and (compare_from > floor)
                        elif operator == "Contains":
                            condition_result = compare_from in condition_region
                        elif operator == "Does Not Contain":
                            condition_result = compare_from not in condition_region

                        condition_result_dict[condition_number] = str(condition_result)

                        eval_string = condition_logic.replace("AND","and").replace("OR","or")

                    for i in list(range(eval_string.count("and") + eval_string.count("or") + 1)):
                        eval_string = eval_string.replace(str(i + 1),condition_result_dict[str(i + 1)])

                    conditions_met = eval(eval_string)

                #Calculates the total for the specific tax.
                if conditions_met == False:
                    specific_total = 0
                else:
                    if not pd.isna(amount):
                        specific_total = amount * (li_value / shipment_value)
                    elif part_specific:
                        if pd.isna(additional_part_specific):
                            if not pd.isna(li_rate):
                                specific_total = applied_to * li_rate/100
                            else:
                                specific_total = applied_to * default_duty_rate/100
                        else:
                            additional_specific_rate = eval(f'li_part_specific_{additional_part_specific}')
                            if not pd.isna(additional_specific_rate):
                                specific_total = applied_to * additional_specific_rate/100
                            else:
                                specific_total = 0
                    else:
                        specific_total = applied_to * rate/100


                    if not pd.isna(tax_min):
                        if not pd.isna(tax_max):
                            li_max = tax_max * (li_value / shipment_value)
                            li_min = tax_min * (li_value / shipment_value)
                            specific_total = min([max([li_min,specific_total]),li_max])
                        else:
                            li_min = tax_min * (li_value / shipment_value)
                            specific_total = max([li_min,specific_total])
                    elif not pd.isna(tax_max):
                        li_max = tax_max * (li_value / shipment_value)
                        specific_total = min([specific_total,li_max])

                specific_total = round(specific_total,8)
                
                li_tax_calc_totals_dict[all_taxes_dict[tax]["Order_Number__c"]] = specific_total
                
                #Sums all the totals of the various taxes for the specific record.
                so_reference = li_dict[li]["Shipment_Order__r.Client_Reference__c"]
                total = round(sum(li_tax_calc_totals_dict.values()),8)
                all_taxes_total[li] = {}
                all_taxes_total[li]["Client Reference"] = so_reference
                all_taxes_total[li]["Total Taxes"] = round(total,8)

            for key in all_taxes_total.keys():
                dict_add_amount = round(all_taxes_total[key]["Total Taxes"],8)
                try:
                    tax_calc_totals_dict[all_taxes_dict[tax]["Order_Number__c"]] += dict_add_amount
                except:
                    tax_calc_totals_dict[all_taxes_dict[tax]["Order_Number__c"]] = dict_add_amount

    #Sums all the totals of the various taxes for the specific record.
    total = round(sum(tax_calc_totals_dict.values()),8)
    return total
